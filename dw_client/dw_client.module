<?php

/**
 * @file
 *   Drupal Watchtower client module. Provides watchtower-reporting
 *   functionality.
 */

/**
 * Default minimal period of time in seconds between reports executed by cron.
 */
define('WATCHTOWER_DEFAULT_REPORT_THRESHOLD', 10800);

/**
 * Implements hook_help().
 */
function dw_client_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dw_client':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The module allows sending reports to Watchtower server.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configure settings') . '</dt>';
      $output .= '<dd>' . t('Administrators can configure automatic report send at <a href="!link">Watchtower administration page</a>.', array(
          '!link' => url('admin/config/system/watchtower_client'),
        )) . '</dd>';
      $output .= '<dt>' . t('Configuring cron') . '</dt>';
      $output .= '<dd>' . t('A working <a href="!cron">cron maintenance task</a> is required to send reports automatically.', array(
          '!cron' => url('admin/config/system/cron'),
        )) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'admin/config/system/watchtower_client':
      return t('Configure server and schedule time to send reports');
  }
}

/**
 * Implements hook_menu().
 */
function dw_client_menu() {
  $items = array();
  $items['admin/config/system/watchtower_client'] = array(
    'title' => 'Drupal Watchtower Client settings',
    'description' => 'Configure reports scheduling and details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dw_client_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dw_client.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_hook_info().
 */
function dw_client_hook_info() {
  $hooks['dw_metric'] = array(
    'group' => 'metric',
  );
  return $hooks;
}

/**
 * Implements hook_cron().
 */
function dw_client_cron() {
  _dw_client_report();
}

/**
 * Implements hook_modules_enabled().
 */
function dw_client_modules_enabled($modules) {
  if (variable_get('watchtower_on_modules_events', FALSE)) {
    _dw_client_report(TRUE);
  }
}

/**
 * Implements hook_modules_disabled().
 */
function dw_client_modules_disabled($modules) {
  if (variable_get('watchtower_on_modules_events', FALSE)) {
    _dw_client_report(TRUE);
  }
}

/**
 * Sends state report to watchtower server.
 *
 * @param bool $force
 *   Do not check the last report time.
 *
 * @return bool
 *   Is result successful.
 */
function _dw_client_report($force = FALSE) {
  $watchtower = variable_get('watchtower_server', '');
  $server_url = $watchtower . 'xmlrpc.php';
  $api_key = variable_get('watchtower_api_key', '');
  if (valid_url($server_url) && !empty($api_key)) {
    $time = time();
    if ($force || ($time - variable_get('watchtower_last_report', 0) >= variable_get('watchtower_report_threshold', WATCHTOWER_DEFAULT_REPORT_THRESHOLD))) {
      // This could be called from drush command so file can be loaded already
      // from ~/.drush folder.
      if (!function_exists('watchtower_get_default_report')) {
        module_load_include('inc', 'dw_client', 'watchtower.drush');
      }

      $report = watchtower_get_default_report();
      $server_uid = (int) current(explode(':', $api_key));
      $current_site_key = watchtower_get_drupal_site_key();
      // Sign data with api_key.
      // @todo is that enough?
      $signature = md5($api_key . json_encode($report) . $current_site_key);
      //$signature = json_encode($report);
      $result = xmlrpc($server_url, array(
        'drupal_watchtower.report' => array(
          $report,
          $server_uid,
          $current_site_key,
          $signature
        ),
      ));

      if (!$result) {
        watchdog('dw_client', xmlrpc_error_msg(), array(), WATCHDOG_ERROR);
      }
      else {
        variable_set('watchtower_last_report', $time);
        variable_set('watchtower_instance_info_url', $result);
      }
    }
  }
  return !empty($result);
}
