<?php

/**
 * @file
 *   Base Drupal Watchtower server module.
 */

/**
 * Implements hook_menu().
 */
function dw_server_menu() {
  $items = array();
  $items['admin/config/system/watchtower_server'] = array(
    'title' => 'Drupal Watchtower Server settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dw_server_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dw_server.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_xmlrpc().
 */
function dw_server_xmlrpc() {
  return array(
    'drupal_watchtower.report' => 'dw_server_process_report',
  );
}

/**
 * Processes XML RPC request
 *
 * @param array $report_data
 *   The data from client.
 *
 * @return string
 */
function dw_server_process_report($report_data) {
  module_load_include('inc', 'dw_server', 'dw_server.xmlrpc');

  $default = array(
    'watchtower_key' => '',
    'drupal_root' => '',
    'conf_path' => '',
    'metrics' => array(),
  );
  $data = drupal_array_merge_deep($default, $report_data);

  $node = _dw_server_get_instance($data['watchtower_key'], $data['drupal_root'], $data['conf_path'], ip_address());

  $metrics = $data['metrics'];
  // Fills field_modules field.
  if (isset($metrics['site:modules'])) {
    $modules = $metrics['site:modules'];
    unset($metrics['site:modules']);
    ksort($modules);
    if ($modules = _dw_server_get_modules_tids($modules)) {
      $node->get('field_modules')->set($modules);
    }
  }

  // Fills field_patches field.
  if (isset($metrics['site:patches'])) {
    $patches = $metrics['site:patches'];
    unset($metrics['site:patches']);
    if ($patches = _dw_server_get_patches_nids($patches)) {
      $node->get('field_patches')->set($patches);
    }
  }

  // Keep metrics ordered.
  ksort($metrics);

  // Fills field_metrics field.
  $metrics_save = array();
  foreach ($metrics as $k => $v) {
    $metrics_save[] = $k . ' = ' . $v;
  }
  $node->get('field_metrics')->set($metrics_save);

  $node->revision = TRUE;
  $node->save();

  return url('node/' . $node->get('nid')->value(), array('absolute' => TRUE));
}
